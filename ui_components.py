# ui_components.py 
import streamlit as st
import json
import os

# --- CSS Injection ---
# ui_components.py
import streamlit as st
import json
import os

# --- CSS Injection (Cross-browser compatible version) ---
st.markdown("""
<style>
/* 
  div[data-testid="stButton"]Îäî StreamlitÏù¥ Î≤ÑÌäºÏùÑ Í∞êÏã∏Îäî divÏóê Î∂ÄÏó¨ÌïòÎäî
  Í≥†Ïú†Ìïú ÏÜçÏÑ±ÏúºÎ°ú, Îçî ÏïàÏ†ïÏ†ÅÏù∏ ÏÑ†ÌÉùÏûê(selector)ÏûÖÎãàÎã§. 
*/
div[data-testid="stButton"] > button {
    /* Í∏∞Î≥∏ Î†àÏù¥ÏïÑÏõÉ Î∞è ÎîîÏûêÏù∏ */
    width: 100%;
    text-align: left !important;
    padding: 1rem !important; /* rem Îã®ÏúÑÍ∞Ä Î™®Î∞îÏùºÏóêÏÑú Îçî ÏùºÍ¥ÄÏ†ÅÏûÖÎãàÎã§. */
    border-radius: 0.5rem !important;
    margin-bottom: 0.5rem; /* Î≤ÑÌäº ÏÇ¨Ïù¥Ïùò Í∞ÑÍ≤© */
    
    /* ÏÉâÏÉÅ Î∞è ÌÖåÎëêÎ¶¨ */
    color: #31333f !important;
    background-color: #ffffff !important; /* Í∏∞Î≥∏ Î∞∞Í≤ΩÏùÑ Ìù∞ÏÉâÏúºÎ°ú Î≥ÄÍ≤Ω */
    border: 1px solid #e6e6e6 !important;
    
    /* Ïï†ÎãàÎ©îÏù¥ÏÖò */
    transition: all 0.2s ease-in-out;
    -webkit-transition: all 0.2s ease-in-out; /* Safari Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú Ï†ëÎëêÏÇ¨ */
}

/* ÎßàÏö∞Ïä§ Ìò∏Î≤Ñ Ïãú Ìö®Í≥º */
div[data-testid="stButton"] > button:hover {
    border-color: #1c83e1 !important;
    background-color: #f0f2f6 !important;
}

/* 'ÏÑ†ÌÉùÎê®' ÏÉÅÌÉú (type="primary") */
div[data-testid="stButton"] > button[kind="primary"] {
    border: 2px solid #1c83e1 !important;
    background-color: #e5f1fc !important;
    /* ÏÑ†ÌÉù Ïãú Í∑∏Î¶ºÏûê Ìö®Í≥ºÎ•º Ï£ºÏñ¥ ÏûÖÏ≤¥Í∞ê Î∂ÄÏó¨ */
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    -webkit-box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Safari Ìò∏ÌôòÏÑ± */
}

/* Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Ïû†Ïãú ÎÇòÌÉÄÎÇòÎäî Ìè¨Ïª§Ïä§ ÌÖåÎëêÎ¶¨ Ï†úÍ±∞ (ÏÑ†ÌÉù ÏÇ¨Ìï≠) */
div[data-testid="stButton"] > button:focus {
    outline: none !important;
    box-shadow: 0 0 0 2px rgba(28, 131, 225, 0.5) !important;
}
</style>
""", unsafe_allow_html=True)


def _handle_choice_selection(choice_key, answer_count):
    """ÏÑ†ÌÉùÏßÄ ÌÅ¥Î¶≠ Ïãú Ìò∏Ï∂úÎêòÎäî ÏΩúÎ∞±. ÏÇ¨Ïö©ÏûêÏùò ÎãµÎ≥ÄÏùÑ ÏÑ∏ÏÖò ÏÉÅÌÉúÏóê ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§."""
    idx = st.session_state.current_question_index
    user_answers = st.session_state.user_answers.get(idx, [])

    if answer_count > 1:
        if choice_key in user_answers: user_answers.remove(choice_key)
        else: user_answers.append(choice_key)
    else:
        user_answers = [choice_key]
    
    st.session_state.user_answers[idx] = user_answers


def display_question(question_data: dict, current_idx: int, total_questions: int):
    """ÌÅ¥Î¶≠ Í∞ÄÎä•Ìïú 'Ïπ¥Îìú' ÌòïÌÉúÏùò ÏÑ†ÌÉùÏßÄÎ•º Ìè¨Ìï®Ìïú ÌÄ¥Ï¶à Î¨∏Ï†úÎ•º ÌëúÏãúÌï©ÎãàÎã§."""
    st.subheader(f"Î¨∏Ï†ú {current_idx + 1}/{total_questions} (ID: {question_data['id']})")
    st.markdown(question_data['question'], unsafe_allow_html=True)
    
    media_url = question_data.get('media_url')
    if media_url and os.path.exists(media_url):
        media_type = question_data.get('media_type')
        if media_type == 'image': st.image(media_url)
        elif media_type == 'video': st.video(media_url)
    
    st.write("---")
   
    try:
        options = json.loads(question_data['options'])
        answer_count = len(json.loads(question_data['answer'])) or 1
    except (json.JSONDecodeError, TypeError):
        options, answer_count = {}, 1

    st.info(f"**Ï†ïÎãµ {answer_count}Í∞úÎ•º Í≥†Î•¥ÏÑ∏Ïöî.**" + (" (Îã§Ïãú ÌÅ¥Î¶≠ÌïòÎ©¥ Ìï¥Ï†ú)" if answer_count > 1 else ""))
    
    user_selection = st.session_state.user_answers.get(current_idx, [])
    
    for key, value in options.items():
        is_selected = key in user_selection
        st.button(
            label=f"{key}. {value}", 
            key=f"choice_{key}_{current_idx}", 
            use_container_width=True,
            type="primary" if is_selected else "secondary",
            on_click=_handle_choice_selection,
            args=(key, answer_count)
        )


def display_results(username, get_ai_explanation_func):
    """ÌÄ¥Ï¶à Í≤∞Í≥ºÎ•º ÏöîÏïΩÌïòÍ≥†, Í∞Å Î¨∏Ï†úÏóê ÎåÄÌïú ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º ÌëúÏãúÌï©ÎãàÎã§."""
    
    # ÏàúÌôò Ï∞∏Ï°∞Î•º ÌîºÌïòÍ∏∞ ÏúÑÌï¥, Ìï®ÏàòÍ∞Ä Ïã§Ï†úÎ°ú ÌïÑÏöîÌï† Îïå Ìï®Ïàò ÎÇ¥Î∂ÄÏóêÏÑú ÏûÑÌè¨Ìä∏Ìï©ÎãàÎã§.
    from db_utils import get_question_by_id, save_user_answer
    # --- Ïó¨Í∏∞ÍπåÏßÄ ---
    
    st.header("üìä ÌÄ¥Ï¶à Í≤∞Í≥º")
    correct_count = 0
    
    for i, q_info in enumerate(st.session_state.questions_to_solve):
        question = get_question_by_id(q_info['id'], q_info['type'])
        if not question:
            st.warning(f"Í≤∞Í≥º ÌëúÏãú Ï§ë Î¨∏Ï†ú(ID: {q_info['id']})Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
            continue

        try:
            options = json.loads(question['options'])
            correct_answer = sorted(json.loads(question['answer']))
        except (json.JSONDecodeError, TypeError):
            options, correct_answer = {}, []

        user_answer = sorted(st.session_state.user_answers.get(i, []))
        is_correct = (user_answer == correct_answer and correct_answer != [])

        with st.expander(f"Î¨∏Ï†ú {i+1} (ID: {question['id']}): {'‚úÖ Ï†ïÎãµ' if is_correct else '‚ùå Ïò§Îãµ'}", expanded=not is_correct):
            st.markdown(question['question'], unsafe_allow_html=True)
            st.write("**Ï†ïÎãµ:**", ", ".join(correct_answer))
            st.write("**ÎÇòÏùò Îãµ:**", ", ".join(user_answer) if user_answer else "ÏÑ†ÌÉù Ïïà Ìï®")
            
            if st.button("ü§ñ AI Ìï¥ÏÑ§ Î≥¥Í∏∞", key=f"exp_{q_info['id']}_{i}"):
                with st.spinner("AI ÌäúÌÑ∞Í∞Ä Ìï¥ÏÑ§ÏùÑ ÎßåÎì§Í≥† ÏûàÏñ¥Ïöî..."):
                    explanation = get_ai_explanation_func(q_info['id'], q_info['type'])
                    error_msg = explanation.get('error') if explanation else "Ìï¥ÏÑ§ÏùÑ Í∞ÄÏ†∏Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§."
                    if error_msg:
                        st.error(error_msg)
                    else:
                        st.info(f"**üí° Ïâ¨Ïö¥ ÎπÑÏú†:**\n\n{explanation.get('analogy', 'N/A')}")
                        st.info(f"**üñºÔ∏è ÌÖçÏä§Ìä∏ ÏãúÍ∞ÅÌôî:**\n\n```\n{explanation.get('visualization', 'N/A')}\n```")
                        st.info(f"**üîë ÌïµÏã¨ Í∞úÎÖê:**\n\n{explanation.get('core_concepts', 'N/A')}")
                        
        if is_correct:
            correct_count += 1
        else:
            save_user_answer(username, q_info['id'], q_info['type'], user_answer, is_correct=False)
    
    total_questions = len(st.session_state.questions_to_solve)
    if total_questions > 0:
        score = (correct_count / total_questions) * 100
        st.title(f"Ï¥ùÏ†ê: {score:.2f}Ï†ê ({correct_count}/{total_questions}Í∞ú Ï†ïÎãµ)")